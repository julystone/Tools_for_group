import refrom dateutil import rrule, parserfrom library import yamlfrom library.xlwings_pd import OperatingExcelPdCONT_PAT = r"(?<=[\>|\)])\n(.*)"SIGN_PAT = r"打卡(.*)次(.*)"NICK_PAT = r":\d{2} (.*)[\(|\<]([^\)|\>]*)"DATE_PAT = r"(\d{4}-\d{2}-\d{2}) (\d{1,2}:\d{1,2}:\d{1,2})"YAML_PATH = "./config.yaml"num_dict = {"一": "1", "二": "2", "三": "3", "四": "4", "五": "5", "六": "6", "七": "7", "八": "8", "九": "9", "十": "10",            "十一": "11", "十二": "12", "十三": "13", "十四": "14", "十五": "15"}miss_list = []susp_list = []with open(YAML_PATH, 'r', encoding='utf-8') as f:    conf = yaml.safe_load(f)    TXT_NAME = conf['txt']['name']    TXT_PATH = conf['txt']['path'] + TXT_NAME    EXCEL_NAME = conf['excel']['name']    SHEET_NAME = conf['excel']['sheet']    EXCEL_PATH = conf['excel']['path'] + EXCEL_NAME    NESS_WORDS = conf['necessaryWords']    FORB_WORDS = conf['forbiddenWords']with open(TXT_PATH, "r", encoding="utf-8") as fo:    txt_file = fo.read()ro = OperatingExcelPd(EXCEL_PATH, SHEET_NAME)dp = ro.return_dp()QQ_dict = dp.to_dict("dict")['QQ']QQ_dict = {str(v): int(k) + 1 for k, v in QQ_dict.items()}nick_dict = dp.to_dict("dict")['nickname']nick_dict = {v: int(k) + 1 for k, v in nick_dict.items()}Origin_Date = ro.read_one_cell(1, 3)Update_Date = ro.read_one_cell(2, 3)print(Origin_Date)def char_trans(char):    """    中文大写的数字数值化    :param char: string  待处理的数据    :return: int    对应数据    """    if char in num_dict.keys():        return num_dict[char]    return chardef inter_trans(inter):    """    数据化    :param inter: string  待处理数据    :return: double  计算完后的数据    """    inter = inter.lower()    inter = inter.lower()    inter = inter.strip("分,， ")    inter = char_trans(inter)    special_symbol = ["w", "万", "。"]    for symbol in special_symbol:        if symbol in inter:            raw_int = inter.split(symbol)[0]            raw_int = char_trans(raw_int)            if "." in raw_int:                return float(raw_int) * 10000            raw_float = inter.split(symbol)[1]            raw_float = char_trans(raw_float)            return float(raw_int + "." + raw_float) * 10000    else:        return float(inter)def run(Excel_File):    """    主逻辑处理    :param Excel_File: Excel_File    :return: None    """    print(f"Current First Date: {Origin_Date}")    li = txt_file.split("\n\n")    for content in li:        filter_flag = False        for words in FORB_WORDS:            if words in content:                filter_flag = True                break        for words in NESS_WORDS:            if words not in content:                filter_flag = True                break        if filter_flag: continue        column_no = 4        date = re.search(DATE_PAT, content).group(1)        time = re.search(DATE_PAT, content).group(2)        diff_date = rrule.rrule(rrule.DAILY, dtstart=parser.parse(str(Origin_Date)),                                until=parser.parse(f'{date} {time}')).count() - 1        if diff_date > 6:            break        column_no += diff_date * 6        if column_no < 0:            continue        if "2019-08-26 21:22:22" in content:            print(1)        nick = re.search(NICK_PAT, content).group(1)        QQ = re.search(NICK_PAT, content).group(2)        time = "0" + time if len(time) == 7 else time        line_no_QQ = QQ_dict.get(QQ) or QQ_dict.get(str(QQ))        line_no_nick = nick_dict.get(nick)        if (line_no_QQ or line_no_nick) is None:            miss_list.append(content)            global dp            dp = dp.append([{"QQ": QQ, "nickname": nick}], ignore_index=True)            continue        elif line_no_QQ is None and line_no_nick is not None:            line_no = line_no_nick            print("QQ have been changed, auto changing")            Excel_File.w_data(line_no, 1, QQ)        elif line_no_nick is None and line_no_QQ is not None:            line_no = line_no_QQ            if nick.strip() == "":                print("nick is None")            else:                print("nick have been changed, auto changing")                Excel_File.w_data(line_no, 2, nick)        else:            line_no = line_no_QQ        Excel_File.w_data(line_no, column_no + 3, date + " " + time)        try:            words = re.search(CONT_PAT, content).group(1)            times = inter_trans(re.search(SIGN_PAT, content).group(1))            average = inter_trans(re.search(SIGN_PAT, content).group(2))            total = times * average            Excel_File.w_data(line_no, column_no, times)            Excel_File.w_data(line_no, column_no + 1, average)            Excel_File.w_data(line_no, column_no + 2, total)            print(f"{nick}\n\t\t{date} {time}\t{words}\n")        except (AttributeError, ValueError):            print(1)            if Excel_File.read_one_cell(line_no, column_no + 5) is None:                Excel_File.w_data(line_no, column_no + 5, words)            susp_list.append(content)    # 表格后处理    Excel_File.w_data(2, 3, date + " " + time)    Excel_File.save_to_excel()    with open(f"./Error_list_{SHEET_NAME}.txt", "w", encoding="utf-8") as f:        f.write("以下为未解析的成功记录数据".center(60, "*") + "\n")        for member in susp_list:            f.write(member)            f.write("\n" + "".center(30, "-") + "\n")        f.write("\n\n" + "以下为未找到该成员的消息记录".center(60, "*") + "\n")        for member in miss_list:            f.write(member)            f.write("\n" + "".center(30, "-") + "\n")if __name__ == '__main__':    run(ro)